<?php namespace Scv\StaticPageList\Components;

use Cms\Classes\ComponentBase;
use RainLab\Pages\Classes\Router;
use Cms\Classes\Theme;
use Request;
use Config;
use RainLab\Pages\Classes\Menu as PagesMenu;

/**
 * The menu component.
 *
 * @package scv\staticpagelist
 * @author scv
 */
class StaticPageList extends ComponentBase
{
    /**
     * @var string The menu name.
     */
    public $menuName;
    
    /**
     * @var array A list of items generated by the menu.
     * Each item is an object of the RainLab\Pages\Classes\MenuItemReference class.
     */
    protected $menuItems;
    
    public function componentDetails()
    {
        return [
            'name'        => 'scv.staticpagelist::lang.component.static_page_list_name',
            'description' => 'scv.staticpagelist::lang.component.static_page_list_description'
        ];
    }

    public function defineProperties()
    {
        return [
            'code' => [
                'title'       => 'rainlab.pages::lang.component.static_menu_code_name',
                'description' => 'rainlab.pages::lang.component.static_menu_code_description',
                'type'        => 'dropdown'
            ]
        ];
    }

    public function getCodeOptions()
    {
        $result = [];

        $theme = Theme::getEditTheme();
        $menus = PagesMenu::listInTheme($theme, true);

        foreach ($menus as $menu) {
            $result[$menu->code] = $menu->name;
        }

        return $result;
    }

    public function onRun()
    {
        $this->page['menuItems'] = $this->menuItems();
    }

    // Editted function from original to return all navigable(not hidden) page objects, suitable for list instead of menu
    public function menuItems()
    {
        if ($this->menuItems !== null) {
            return $this->menuItems;
        }

        if (!strlen($this->property('code'))) {
            return;
        }

        $theme = Theme::getActiveTheme();
        // Get router of active theme
        $router = new Router($theme);
        $menu = PagesMenu::loadCached($theme, $this->property('code'));

        if ($menu) {
            $this->menuItems = $menu->generateReferences($this->page);
            $this->menuName = $menu->name;
        }

        // Return all navigable(not hidden) page objects
        $filteredList = [];
        foreach($this->menuItems as $item){
            $url = str_replace(url('/')."/","",$item->url);
            $pageObject = $router->findByUrl($url);
            if($pageObject->is_hidden == 0){
                $filteredList[] = $pageObject;
            }
        }
        $this->menuItems = $filteredList;

        return $this->menuItems;
    }
}
